import graphviz
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import confusion_matrix
from sklearn import svm, datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels
from sklearn.metrics import classification_report

# อ่านข้อมูล
student = pd.read_csv('https://raw.githubusercontent.com/ffxthmmp/Project/main/datanew.csv')

# กำหนด features โดยลบคอลัมน์ 'BRANCH' ออกจาก DataFrame
features = student

# กำหนด target เป็นคอลัมน์ 'BRANCH'
target = student['BRANCH']

# แปลง target เป็นตัวเลขหากเป็นข้อความ
if target.dtype == 'object':
    target = le.fit_transform(target)

# วนลูปเพื่อแปลงทุกคอลัมน์ที่เป็นข้อความใน features
for column in features.columns:
    if features[column].dtype == 'object':
        features[column] = le.fit_transform(features[column])

# สร้างโมเดล Decision Tree Classifier
clf = DecisionTreeClassifier()
# ฝึกโมเดลด้วย features และ target
clf.fit(features, target)

# สร้างกราฟสำหรับ Decision Tree
dot_data = export_graphviz(
    clf, 
    out_file=None, 
    feature_names=features.columns,  # ใช้ชื่อคอลัมน์จาก DataFrame features
    class_names=["DCA", "DCM", "MTA", "IT"],  # แทนที่ด้วยชื่อคลาสที่เหมาะสม
    filled=True, 
    rounded=True, 
    special_characters=True
)

# สร้างและแสดงภาพ
graph = graphviz.Source(dot_data) 
graph

# แบ่งชุดเทรนข้อมูล
x_train, x_test, y_train, y_test = train_test_split(
    features, target, test_size=0.2, random_state=42
    )

y_test


"""- ทำการสร้าง และสอนโมเดลด้วยข้อมูลสอน"""
clf = tree.DecisionTreeClassifier()
clf = clf.fit(x_train, y_train)


y_pred = clf.predict(x_test)
y_pred

confusion_matrix(y_test, y_pred)

"""- เรายังสามารถวาดกราฟเมทริกซ์สับสนได้โดยใช้ฟังก์ชัน"""

def plot_confusion_matrix(y_true, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if not title:
        if normalize:
            title = 'Normalized confusion matrix'
        else:
            title = 'Confusion matrix, without normalization'

    # Compute confusion matrix
    cm = confusion_matrix(y_true, y_pred)
    
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    fig, ax = plt.subplots()
    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)
    ax.figure.colorbar(im, ax=ax)
    # We want to show all ticks...
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           # ... and label them with the respective list entries
           xticklabels=classes, yticklabels=classes,
           title=title,
           ylabel='True label',
           xlabel='Predicted label')

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
             rotation_mode="anchor")

    # Loop over data dimensions and create text annotations.
    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")
    fig.tight_layout()
    return ax

plot_confusion_matrix(y_test, y_pred, classes=["DCA", "DCM", "MTA", "IT"], normalize=True,
                      title='Normalized confusion matrix')

print(classification_report(y_test, y_pred, target_names=["DCA", "DCM", "MTA", "IT"]))
