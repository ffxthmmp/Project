import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from mpl_toolkits.mplot3d import Axes3D

# โหลดข้อมูลนักเรียนจาก git-hub
student = pd.read_csv('https://raw.githubusercontent.com/ffxthmmp/Project/main/data_r.csv')

# Encode 'BRANCH' column
label_encoder = LabelEncoder()
student['BRANCH_encoded'] = label_encoder.fit_transform(student['BRANCH'])
X = student[['GPA', 'E-GPA', 'RANK', 'ADMITACADYEAR' ,'ACADYEAR', 'ENTRYNAME', 'BRANCH_encoded']]
y = student['LABEL']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=7)

# SVM pipeline
svm_pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('svm', SVC())
])

# Parameter grid for GridSearchCV
param_grid = {
    'svm__C': [500, 5, 457],  # Adjusted range for C
    'svm__gamma': [0.01, 0.001, 0.05, 0.5, 0.1, 1],  # Adjusted range for gamma
    'svm__kernel': ['linear', 'poly', 'rbf', 'sigmoid']  # More than 2 kernels
}


# GridSearchCV
grid_search = GridSearchCV(svm_pipeline, param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Best parameters and best score
print("Best parameters:", grid_search.best_params_)
print("Best cross-validation score:", grid_search.best_score_)

# Evaluate the model with best parameters on the test set
y_pred = grid_search.predict(X_test)
print("Accuracy on test set:", accuracy_score(y_test, y_pred))

# Creating a 3D scatter plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot
scatter = ax.scatter(X_train['E-GPA'], X_train['GPA'], y_train, c=y_train, cmap='Paired_r', alpha=0.7)

# Labeling axes
ax.set_xlabel('E-GPA')
ax.set_ylabel('GPA')
ax.set_zlabel('RANK') ## ไม่ควนแทนหลักสูตร

# Title
ax.set_title('3D Relationship between GPA, E-GPA, and Branch')


# Show the plot
plt.show()
